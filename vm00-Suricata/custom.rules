# Reglas para detectar SQL Injection (SQLI)
alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, SELECT FROM in URI"; flow:established,to_server; content:"SELECT"; nocase; http_uri; content:"FROM"; nocase; http_uri; classtype:web-application-attack; sid:100001; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, UNION SELECT in URI"; flow:established,to_server; content:"UNION"; nocase; http_uri; content:"SELECT"; nocase; http_uri; classtype:web-application-attack; sid:100002; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, INSERT INTO in URI"; flow:established,to_server; content:"INSERT"; nocase; http_uri; content:"INTO"; nocase; http_uri; classtype:web-application-attack; sid:100003; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, UPDATE SET in URI"; flow:established,to_server; content:"UPDATE"; nocase; http_uri; content:"SET"; nocase; distance:0; http_uri; classtype:web-application-attack; sid:100004; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, DELETE FROM in URI"; flow:established,to_server; content:"DELETE"; nocase; http_uri; content:"FROM"; nocase; http_uri; classtype:web-application-attack; sid:100005; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, ALTER in URI"; flow:to_server,established; uricontent:"ALTER"; nocase; pcre:"/ALTER\ +(database|procedure|table|column)/Ui"; classtype:web-application-attack; sid:100006; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, DROP in URI"; flow:to_server,established; uricontent:"DROP"; nocase; pcre:"/DROP\ +(database|procedure|table|column)/Ui"; classtype:web-application-attack; sid:100007; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, CREATE in URI"; flow:to_server,established; uricontent:"CREATE"; nocase; pcre:"/CREATE\ +(database|procedure|table|column|directory)/Ui"; classtype:web-application-attack; sid:100008; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, SELECT CONCAT in URI"; flow:established,to_server; uricontent:"SELECT"; nocase; uricontent:"CONCAT"; nocase; pcre:"/SELECT.+CONCAT/Ui"; classtype:web-application-attack; sid:100009; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, BULK INSERT in URI"; flow:established,to_server; content:"BULK"; nocase; http_uri; content:"INSERT"; nocase; http_uri; distance:0; classtype:web-application-attack; sid:100010; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, SHOW TABLES in URI"; flow:established,to_server; uricontent:"SHOW"; nocase; uricontent:"TABLES"; nocase; pcre:"/SHOW.+TABLES/Ui"; classtype:web-application-attack; sid:100011; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt, SHOW CHARACTER SET in URI"; flow:established,to_server; uricontent:"SHOW"; nocase; uricontent:"CHARACTER"; nocase; content:"SET"; nocase; pcre:"/SHOW.+CHARACTER.+SET/Ui"; classtype:web-application-attack; sid:100012; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible SQL Injection Attempt - Detected 'OR' Pattern in URI"; flow:to_server,established; content:"GET"; http_method; content:"/"; http_uri; pcre:"/\bOR\b/i"; classtype:web-application-attack; sid:100013; rev:1;)


# Local File Inclusion (LFI) Rules
alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, ../ or variations in URI"; flow:to_server,established; uricontent:"../"; classtype:web-application-attack; sid:200001; rev:2;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, URL encoded variations of ../ in URI"; flow:to_server,established; uricontent:"%2e%2e"; nocase; classtype:web-application-attack; sid:200002; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, Double URL encoded variations of ../ in URI"; flow:to_server,established; uricontent:"%252e%252e"; nocase; classtype:web-application-attack; sid:200003; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, /etc/passwd in URI"; flow:to_server,established; uricontent:"/etc/passwd"; nocase; classtype:web-application-attack; sid:200004; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, /proc/version in URI"; flow:to_server,established; uricontent:"/proc/version"; nocase; classtype:web-application-attack; sid:200005; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, /etc/shadow in URI"; flow:to_server,established; uricontent:"/etc/shadow"; nocase; classtype:web-application-attack; sid:200006; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, file:// in URI"; flow:to_server,established; uricontent:"file://"; nocase; classtype:web-application-attack; sid:200007; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, Hex encoded ../ in URI"; flow:to_server,established; uricontent:"%c0%af"; nocase; classtype:web-application-attack; sid:200008; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, Unicode encoded ../ in URI"; flow:to_server,established; uricontent:"%u002e%u002e%u002f"; nocase; classtype:web-application-attack; sid:200009; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Local File Inclusion Attempt, Null Byte in URI"; flow:to_server,established; uricontent:"%00"; classtype:web-application-attack; sid:200010; rev:1;)


# Remote File Inclusion (RFI) Rules
alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Remote File Inclusion Attempt, http/https in URI"; flow:to_server,established; uricontent:"=http"; nocase; classtype:web-application-attack; sid:300001; rev:3;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Remote File Inclusion Attempt, PHP include/require functions in URI"; flow:to_server,established; pcre:"/(include\(|require\(|include_once\(|require_once\()/i"; classtype:web-application-attack; sid:300002; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Remote File Inclusion Attempt, PHP Wrapper in URI"; flow:to_server,established; uricontent:"php://"; nocase; classtype:web-application-attack; sid:300003; rev:2;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Remote File Inclusion Attempt, Common Remote File Extensions in URI"; flow:to_server,established; pcre:"/(\.asp|\.aspx|\.jsp)/i"; classtype:web-application-attack; sid:300004; rev:2;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Remote File Inclusion Attempt, Proxy Parameters in URI"; flow:to_server,established; pcre:"/(proxy|url|dest)/i"; classtype:web-application-attack; sid:300005; rev:2;)


# Brute force Rules
alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Brute Force Login Attempt, 10 logins in 10 seconds"; flow:to_server,established; uricontent:"/vulnerabilities/brute/"; uricontent:"Login"; threshold: type both, track by_src, count 10, seconds 10; classtype:web-application-attack; sid:400001; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Brute Force Login Attempt, Common Usernames"; flow:to_server,established; content:"/vulnerabilities/brute/"; http_uri; pcre:"/(username=)(administrator|root|user|test)/Ui"; classtype:web-application-attack; sid:400002; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Brute Force Login Attempt, Common Passwords"; flow:to_server,established; uricontent:"/vulnerabilities/brute/"; pcre:"/(password=)(password123|123456|admin|admin123|qwerty)/Ui"; classtype:web-application-attack; sid:400003; rev:1;)

alert http any any -> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible Hydra Brute Force Attack"; flow:to_server,established; content:"Hydra"; threshold: type both, track by_src, count 10, seconds 10; classtype:web-application-attack; sid:400004; rev:1;)


# Denial of Service (DoS) and Distributed Denial of Services (DDoS) Rules
alert tcp any any -> $HTTP_SERVERS any (msg:"Possible SYN Flood Attack"; flow:to_server; flags:S; threshold: type both, track by_dst, count  5000, seconds 20; classtype:denial-of-service; sid:500001; rev:1;)

alert udp any any -> $HTTP_SERVERS any (msg:"Possible UDP Flood Attack"; flow:to_server; threshold: type both, track by_dst, count  5000, seconds 20; classtype:denial-of-service; sid:500002; rev:1;)

alert icmp any any -> $HTTP_SERVERS any (msg:"Possible SMURF Flood Attack"; flow:to_server; threshold: type both, track by_dst, count  5000, seconds 20; classtype:denial-of-service; sid:500003; rev:1;)

alert tcp $HTTP_SERVERS $HTTP_PORTS <> $HTTP_SERVERS $HTTP_PORTS (msg:"Possible LAND Flood Attack"; classtype:denial-of-service; sid:500004; rev:1;)